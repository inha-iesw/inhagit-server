name: Deploy to Staging Server test

on:
  pull_request:
    types: [closed]
    branches:
      - test-cd

permissions:
  contents: read

jobs:
  deploy-stage:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    steps:
      - name: Checkout Submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.DOCS_DEPLOY_TOKEN }}

      - name: Set application.yml from submodule
        run: |
          mkdir -p ./src/main/resources
          cp ./inhagit-server-secret/application-stage.yml ./src/main/resources/application.yml

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Deploy to Staging Server
        env:
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH_STAGE }}
        run: |
          PROJECT_ROOT=$DEPLOY_PATH
          DEPLOY_LOG="$PROJECT_ROOT/deploy.log"
          APP_LOG="$PROJECT_ROOT/application.log"
          ERROR_LOG="$PROJECT_ROOT/error.log"
          TIME_NOW=$(date '+%Y-%m-%d %H:%M:%S')

          # 디렉토리 존재 확인
          if [ ! -d "$PROJECT_ROOT" ]; then
            echo "Deploy directory does not exist: $PROJECT_ROOT"
            exit 1
          fi

          # 현재 실행 중인 프로세스 종료
          CURRENT_PID=$(pgrep -f "git-.*.jar")
          if [ -z "$CURRENT_PID" ]; then
            echo "$TIME_NOW > 현재 실행중인 애플리케이션이 없습니다" >> $DEPLOY_LOG
          else
            echo "$TIME_NOW > 실행중인 $CURRENT_PID 애플리케이션 종료 " >> $DEPLOY_LOG
            kill -15 $CURRENT_PID

            # 프로세스가 정상적으로 종료되었는지 확인
            sleep 5
            if kill -0 $CURRENT_PID 2>/dev/null; then
              echo "$TIME_NOW > 강제 종료 실행" >> $DEPLOY_LOG
              kill -9 $CURRENT_PID
            fi
          fi

          # JAR 파일 존재 확인
          LATEST_JAR=$(ls -t $PROJECT_ROOT/build/libs/git-*.jar | head -n 1)
          if [ ! -f "$LATEST_JAR" ]; then
            echo "$TIME_NOW > JAR 파일을 찾을 수 없습니다" >> $DEPLOY_LOG
            exit 1
          fi

          echo "$TIME_NOW > 새 버전 배포 시작: $LATEST_JAR" >> $DEPLOY_LOG
          nohup java -jar $LATEST_JAR > $APP_LOG 2> $ERROR_LOG &

          # 새로운 프로세스가 정상적으로 시작되었는지 확인
          sleep 10
          NEW_PID=$(pgrep -f "git-.*.jar")
          if [ -z "$NEW_PID" ]; then
            echo "$TIME_NOW > 애플리케이션 시작 실패" >> $DEPLOY_LOG
            exit 1
          fi

          echo "$TIME_NOW > 새 애플리케이션 실행 완료 (PID: $NEW_PID)" >> $DEPLOY_LOG